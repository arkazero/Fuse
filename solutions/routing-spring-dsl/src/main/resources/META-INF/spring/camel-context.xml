<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="vm://localhost?broker.persistent=false&amp;broker.useJmx=false&amp;broker.enableStatistics=false"/>
            </bean>
        </property>
    </bean>
    <camelContext id="_camelContext1" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="server" location="ftp.properties"/>
        <!-- Instead of an onException element you could use an errorHandler -->
        <!--
        <errorHandler id="errorHandler" type="DefaultErrorHandler">
            <redeliveryPolicy maximumRedeliveries="2"/>
        </errorHandler>
        -->
        <onException id="networkErrorHandler">
            <exception>java.net.SocketException</exception>
            <redeliveryPolicy maximumRedeliveries="2"/>
        </onException>
        <route id="_route1">
            <from id="_from1" uri="activemq:queue:orders"/>
            <log id="_log1" message="${body}"/>
            <setHeader headerName="orderId" id="_setHeader1">
                <xpath>/order/orderId/text()</xpath>
            </setHeader>
            <choice id="_choice1">
                <when id="_when1">
                    <xpath>/order/orderItems/orderItem/orderItemPublisherName/text() = 'ABC Company'</xpath>
                    <to id="_to1" uri="ftp://{{server.hostname}}:{{server.port}}/?username={{to.abc.username}}&amp;password={{to.abc.password}}&amp;fileName=order-${header.orderId}.xml"/>
                </when>
                <when id="_when2">
                    <xpath>/order/orderItems/orderItem/orderItemPublisherName/text() = 'ORly'</xpath>
                    <to id="_to2" uri="ftp://{{server.hostname}}:{{server.port}}/?username={{to.orly.username}}&amp;password={{to.orly.password}}&amp;fileName=order-${header.orderId}.xml"/>
                </when>
                <when id="_when3">
                    <xpath>/order/orderItems/orderItem/orderItemPublisherName/text() = 'Namming'</xpath>
                    <to id="_to3" uri="ftp://{{server.hostname}}:{{server.port}}/?username={{to.namming.username}}&amp;password={{to.namming.password}}&amp;fileName=order-${header.orderId}.xml"/>
                </when>
                <otherwise id="_otherwise1">
                    <log id="_log2" message="Failed to deliver order-${header.orderId}.xml"/>
                </otherwise>
            </choice>
        </route>
    </camelContext>
</beans>
